* Unmerged path backend/nokia-innovative-project/pom.xml
[1mdiff --git a/backend/nokia-innovative-project/src/main/java/com/nokia/library/nokiainnovativeproject/controllers/BookController.java b/backend/nokia-innovative-project/src/main/java/com/nokia/library/nokiainnovativeproject/controllers/BookController.java[m
[1mindex b0dfad8..fa1f3e0 100644[m
[1m--- a/backend/nokia-innovative-project/src/main/java/com/nokia/library/nokiainnovativeproject/controllers/BookController.java[m
[1m+++ b/backend/nokia-innovative-project/src/main/java/com/nokia/library/nokiainnovativeproject/controllers/BookController.java[m
[36m@@ -18,47 +18,47 @@[m [mpublic class BookController {[m
 [m
 	@Autowired[m
 	private BookRepository bookRepository;[m
[31m-	[m
[31m-	// Get All Notes[m
[32m+[m
[32m+[m	[32m// Get All Books[m
 	@GetMapping("/books")[m
 	public List<Book> getAllBooks() {[m
[31m-	    return bookRepository.findAll();[m
[32m+[m		[32mreturn bookRepository.findAll();[m
 	}[m
[31m-	[m
[32m+[m
 	// Get a Single Book[m
 	@GetMapping("/books/{id}")[m
 	public Book getBookById(@PathVariable(value = "id") Long bookId) {[m
[31m-	    return bookRepository.findById(bookId)[m
[31m-	            .orElseThrow( ()-> new ResourceNotFoundException("Book", "id", bookId));[m
[32m+[m		[32mreturn bookRepository.findById(bookId)[m
[32m+[m				[32m.orElseThrow(() -> new ResourceNotFoundException("Book", "id", bookId));[m
 	}[m
[31m-	[m
[32m+[m
 	// Save a Single Book[m
 	@PostMapping("/books")[m
 	public Book createBook(@Valid @RequestBody Book book) {[m
 		return bookRepository.save(book);[m
 	}[m
[31m-	[m
[32m+[m
 	// Update a Single Book[m
 	@PutMapping("/books/{id}")[m
 	public ResponseEntity<Book> updateBook([m
 			@PathVariable(value = "id") Long bookId,[m
 			@Valid @RequestBody Book bookDetails) throws ResourceNotFoundException {[m
 		Book book = bookRepository.findById(bookId)[m
[31m-		        .orElseThrow(() -> new ResourceNotFoundException("Book", "id", bookId));[m
[31m-		[m
[32m+[m				[32m.orElseThrow(() -> new ResourceNotFoundException("Book", "id", bookId));[m
[32m+[m
 		book.setTitle(bookDetails.getTitle());[m
 		book.setAuthorName(bookDetails.getAuthorName());[m
 		book.setAuthorSurname(bookDetails.getAuthorSurname());[m
 		final Book updatedBook = bookRepository.save(book);[m
 		return ResponseEntity.ok(updatedBook);[m
 	}[m
[31m-	[m
[32m+[m
 	// Delete a Single Book[m
 	@DeleteMapping("/books/{id}")[m
 	public Map<String, Boolean> deleteBook([m
 			@PathVariable(value = "id") Long bookId) throws ResourceNotFoundException {[m
 		Book book = bookRepository.findById(bookId)[m
[31m-		        .orElseThrow(() -> new ResourceNotFoundException("Book", "id", bookId));[m
[32m+[m				[32m.orElseThrow(() -> new ResourceNotFoundException("Book", "id", bookId));[m
 [m
 		bookRepository.delete(book);[m
 		Map<String, Boolean> response = new HashMap<>();[m
[1mdiff --git a/backend/nokia-innovative-project/src/main/resources/application.properties b/backend/nokia-innovative-project/src/main/resources/application.properties[m
[1mindex 091410d..a4fe36c 100644[m
[1m--- a/backend/nokia-innovative-project/src/main/resources/application.properties[m
[1m+++ b/backend/nokia-innovative-project/src/main/resources/application.properties[m
[36m@@ -13,6 +13,4 @@[m [mspring.jpa.hibernate.ddl-auto = update[m
 #spring.jpa.open-in-view is enabled by default. [m
 #Therefore, database queries may be performed during view rendering. [m
 #Explicitly configure spring.jpa.open-in-view to disable this warning[m
[31m-spring.jpa.open-in-view=false[m
[31m-[m
[31m-cors.urls=http://localhost:4200[m
\ No newline at end of file[m
[32m+[m[32mspring.jpa.open-in-view=false[m
\ No newline at end of file[m
* Unmerged path backend/nokia-innovative-project/src/test/java/com/nokia/library/nokiainnovativeproject/repositories/BookRepositoryTest.java
[1mdiff --git a/frontend/src/app/components/homepage/homepage.component.ts b/frontend/src/app/components/homepage/homepage.component.ts[m
[1mindex 9124c2c..f6f813f 100644[m
[1m--- a/frontend/src/app/components/homepage/homepage.component.ts[m
[1m+++ b/frontend/src/app/components/homepage/homepage.component.ts[m
[36m@@ -8,13 +8,13 @@[m [mimport { RestService } from '../../shared/services/rest/rest.service';[m
 })[m
 export class HomepageComponent implements OnInit {[m
 [m
[31m-[m
 	books: any[];[m
 	fakeBooks = [[m
 		{ 'id': 1, 'title': 'title 1', 'authorName': 'name1', 'authorSurname': 'surname1' },[m
 		{ 'id': 2, 'title': 'title 2', 'authorName': 'name2', 'authorSurname': 'surname2' },[m
 		{ 'id': 3, 'title': 'title 3', 'authorName': 'name2', 'authorSurname': 'surname2' }[m
 	];[m
[32m+[m	[32mnewBook = { 'id': null, 'title': 'book ' + Math.floor(Math.random() * 100), 'authorName': 'name ' + Math.floor(Math.random() * 100), 'authorSurname': 'surname' + Math.floor(Math.random() * 100) };[m
 [m
 	constructor(private restService: RestService) {[m
 	}[m
[36m@@ -22,10 +22,11 @@[m [mexport class HomepageComponent implements OnInit {[m
 	ngOnInit() {[m
 [m
 		const url = 'books';[m
[32m+[m		[32m// get all books[m
 		this.restService.getAll(url).then(response => {[m
 			if (response.status === 200) {[m
 				this.books = response.data._embedded.books;[m
[31m-				console.log(this.books);[m
[32m+[m				[32mconsole.log(response.data);[m
 			} else {[m
 [m
 			}[m
[36m@@ -35,6 +36,28 @@[m [mexport class HomepageComponent implements OnInit {[m
 			console.log(error);[m
 [m
 		});[m
[32m+[m
[32m+[m		[32m// post[m
[32m+[m		[32mthis.restService.post("books", this.newBook)[m
[32m+[m		[32m.then(function (response) {[m
[32m+[m			[32mif (response.status == 201) {[m
[32m+[m				[32mconsole.log('book added')[m
[32m+[m			[32m} else {[m
[32m+[m				[32mconsole.log('error');[m
[32m+[m			[32m}[m
[32m+[m		[32m}).catch((error) => {[m
[32m+[m			[32mconsole.log('error');[m
[32m+[m		[32m});[m
[32m+[m
[32m+[m		[32m// update[m
[32m+[m		[32mthis.restService.update('books', 70, this.newBook).then(response => {})[m
[32m+[m		[32mconsole.log('book updated');[m
[32m+[m
[32m+[m		[32m// delete[m
[32m+[m		[32mthis.restService.remove('books', 71).then(response => {[m
[32m+[m			[32mconsole.log('book removed');[m
[32m+[m		[32m})[m
[32m+[m
 	}[m
 [m
 }[m
[1mdiff --git a/frontend/src/app/shared/services/rest/rest.service.ts b/frontend/src/app/shared/services/rest/rest.service.ts[m
[1mindex 185a717..33213c4 100644[m
[1m--- a/frontend/src/app/shared/services/rest/rest.service.ts[m
[1m+++ b/frontend/src/app/shared/services/rest/rest.service.ts[m
[36m@@ -5,13 +5,42 @@[m [mimport { config } from 'rxjs/index';[m
 [m
 @Injectable()[m
 export class RestService {[m
[31m-	config = {[m
[31m-		headers: { 'Access-Control-Allow-Origin': '*' }[m
[31m-	};[m
 [m
 	constructor() {[m
 	}[m
 [m
[32m+[m	[32mpost<T>(resourceName: string, params?) {[m
[32m+[m		[32mconst url = `${API_URL}/${resourceName}`;[m
[32m+[m		[32mreturn axios.post(url, params)[m
[32m+[m		[32m.then(response => response)[m
[32m+[m		[32m.catch(error => error);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mremove<T>(resourceName: string, id: any) {[m
[32m+[m		[32mconst url = `${API_URL}/${resourceName}/${id}`;[m
[32m+[m		[32mreturn axios.delete(url)[m
[32m+[m		[32m.then(response => response)[m
[32m+[m		[32m.catch(error => error);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mupdate<T>(resourceName: string, id: any, params?) {[m
[32m+[m		[32mconst url = `${API_URL}/${resourceName}/${id}`;[m
[32m+[m		[32mreturn axios.put(url, params)[m
[32m+[m		[32m.then(response => response)[m
[32m+[m		[32m.catch(error => error);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mgetOne<T>(id: any, resourceName: string) {[m
[32m+[m		[32mconst url = `${API_URL}/${resourceName}/${id}`;[m
[32m+[m		[32mreturn axios.get(url)[m
[32m+[m		[32m.then(function (response) {[m
[32m+[m			[32mreturn response;[m
[32m+[m		[32m})[m
[32m+[m		[32m.catch(function (error) {[m
[32m+[m			[32mreturn error;[m
[32m+[m		[32m});[m
[32m+[m	[32m}[m
[32m+[m
 	getAll<T>(resourceName: String) {[m
 [m
 		const url = `${API_URL}/${resourceName}`;[m
[1mdiff --git a/frontend/src/index.html b/frontend/src/index.html[m
[1mindex 38c1a45..dbfac1d 100644[m
[1m--- a/frontend/src/index.html[m
[1m+++ b/frontend/src/index.html[m
[36m@@ -10,7 +10,7 @@[m
 	<meta name="viewport" content="width=device-width, initial-scale=1">[m
 	<link rel="icon" type="image/x-icon" href="favicon.ico">[m
 </head>[m
[31m-<body>[m
[32m+[m[32m<body class="center-content">[m
 <app-root></app-root>[m
 </body>[m
 </html>[m
[1mdiff --git a/frontend/src/styles.css b/frontend/src/styles.css[m
[1mindex bae85a4..49bd9a3 100644[m
[1m--- a/frontend/src/styles.css[m
[1m+++ b/frontend/src/styles.css[m
[36m@@ -8,4 +8,8 @@[m [mbody {[m
 	margin: 0;[m
 	font-family: 'Lato', sans-serif;[m
 	font-weight: 400;[m
[32m+[m[32m}[m
[32m+[m[32m.center-content {[m
[32m+[m	[32mmax-width: 80%;[m
[32m+[m	[32mmargin: auto;[m
 }[m
\ No newline at end of file[m
